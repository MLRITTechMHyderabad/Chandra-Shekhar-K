Atomicity
    Definition:

Atomicity ensures that a transaction is treated as a single unit, which either completes in its entirety or does not complete at all.
In other words, if one part of the transaction fails, the entire transaction fails, and the database is rolled back to its initial state before the transaction began.

 Consistency
Definition:

Consistency ensures that a transaction transforms the database from one valid state to another, maintaining database rules (such as constraints, triggers, and transactions).
After a transaction, the database must be in a consistent state. This means that all integrity constraints (e.g., foreign keys, primary keys) must still be valid.

3. Isolation
Definition:

Isolation ensures that concurrent transactions do not interfere with each other. Each transaction should execute as if it is the only transaction in the system, even if multiple transactions are running concurrently.
Isolation is typically managed through transaction isolation levels, which determine how visible the changes of one transaction are to others.
There are four standard isolation levels:

    Read Uncommitted: Transactions can read uncommitted changes made by other transactions.
    Read Committed: Transactions can only read committed changes made by other transactions.
    Repeatable Read: Transactions can read data, and no other transactions can modify it until the current transaction is completed.
    Serializable: The highest isolation level. Transactions are executed sequentially as if there is only one transaction at a time.

4. Durability
Definition:

Durability ensures that once a transaction is committed, the changes made to the database are permanent, even in the event of a system crash or power failure.
This property guarantees that data is safely stored and will not be lost.
Example:

Suppose that after transferring $100 from User A to User B, the system crashes. If durability is ensured, the changes to the database (subtraction from User A’s balance and addition to User B’s balance) will not be lost. The database will recover and remain consistent.


Example Scenario:
Let's go through an example scenario that demonstrates all four ACID properties in action.

Scenario: A user is transferring money from their bank account to a friend's account.

Transaction Start:

User A initiates a transaction to transfer $100 to User B.
Atomicity:

The transaction includes two steps: deducting $100 from User A's account and adding $100 to User B's account.
If any step fails (e.g., due to a system crash), the entire transaction fails, and neither user's account balance is altered.
Consistency:

The system checks for any constraints (e.g., no account should have a negative balance). If there is not enough balance in User A’s account, the transaction will not proceed.
Isolation:

If another user (User C) tries to check or update User A's balance while the transaction is in progress, User C will not see intermediate changes. User C will either see the original balance or the final committed balance once the transaction is complete.
Durability:

Once the transaction is committed, even if the system crashes, the transfer of funds will be recorded permanently, and the balances will be correct when the system recovers.
